-- phpMyAdmin SQL Dump
-- version 4.1.6
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Feb 19, 2014 at 10:27 PM
-- Server version: 5.5.35-0ubuntu0.12.04.2
-- PHP Version: 5.3.10-1ubuntu3.9

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `nedoboard`
--

-- --------------------------------------------------------

--
-- Table structure for table `Comment`
--

CREATE TABLE IF NOT EXISTS `Comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `thread_id` int(11) NOT NULL,
  `comment` varchar(9000) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=22 ;

--
-- Dumping data for table `Comment`
--

INSERT INTO `Comment` (`id`, `thread_id`, `comment`) VALUES
(1, 138, 'Жи есть!'),
(2, 138, 'BUMP'),
(3, 138, 'Братуха'),
(4, 0, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(5, 0, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(6, 0, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(7, 0, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(8, 0, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(9, 138, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(10, 138, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(11, 139, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(12, 137, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(13, 138, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(14, 138, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(15, 136, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(16, 137, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(17, 137, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(18, 139, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(19, 139, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(20, 135, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:'),
(21, 140, 'Код надо писать не как \r\nпопало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный \r\nкод не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и\r\nнажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides \r\n(http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.),\r\nвот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, \r\nиспользуется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом,\r\nоткрой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" —\r\nхорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab\r\nон вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:');

-- --------------------------------------------------------

--
-- Table structure for table `Thread`
--

CREATE TABLE IF NOT EXISTS `Thread` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(30) NOT NULL,
  `name` varchar(20) NOT NULL DEFAULT 'Anonymous',
  `post` varchar(9000) NOT NULL,
  `timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `seconds` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=141 ;

--
-- Dumping data for table `Thread`
--

INSERT INTO `Thread` (`id`, `title`, `name`, `post`, `timestamp`, `seconds`) VALUES
(128, 'Hello bros', 'Ananas', 'If $obj->thisMightThrowException() does throw an Exception the code will run as expected. However, if no exception is thrown the call to $app->redirect() will throw a \\Slim\\Exception\\Stop Exception that will be caught by the user catch block rather than by the framework redirecting the browser to the “/error” page. Where possible in your own application you should use typed Exceptions so your catch blocks are more targeted rather than swallowing all Exceptions. In some situations the thisMightThrowException() might be an external component call that you don’t control, in which case typing all exceptions thrown may not be feasible. For these instances we can adjust our code slightly by moving the success $app->redirect() after the try/catch block to fix the issues. Since processing will stop on the error redirect this code will now execute as expected.', '2014-02-18 15:21:40', 1392736900),
(129, 'Йоба, прием!', 'Anonymous', 'ПППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППП\r\nПППППППППППППППППППППППППППППППП\r\nПППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППП', '2014-02-18 15:25:14', 1392737114),
(130, 'Halt', 'Anonymous', 'The Slim application’s halt() method will immediately return an HTTP response with a given status code and body. This method accepts two arguments: the HTTP status code and an optional message. Slim will immediately halt the current application and send an HTTP response to the client with the specified status and optional message (as the response body). This will override the existing \\Slim\\Http\\Response object.', '2014-02-18 15:27:38', 1392737258),
(131, 'Проблема с PHP', 'Anonymous', 'Код надо писать не как попало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный код не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и нажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides (http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.), вот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, используется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом, открой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" — хорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab он вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:', '2014-02-18 15:42:23', 1392738143),
(132, 'Никаких проблем', 'Anonymous', '$done[1][0]$done[1][0]$done[1][0]$done[1][0]$done[1][0]\r\n$done[1][0]$done[1][0]$done[1][0]мdone[1][0]$done[1][0]', '2014-02-18 15:42:43', 1392738163),
(133, 'Сортировка-сортировочка', 'Анончик', 'В PHP есть несколько функций для сортировки массивов, на этой странице дается их общее описание.\r\n\r\nОсновные различия между функциями:\r\n\r\nВ одних функциях массивы array сортируются по ключам элементов, в других по значениям: $array[''ключ''] = ''значение'';\r\nВ каких-то функциях связь между ключами и значениями после сортировки сохраняется, в каких-то нет. Это может приводить к тому, что ключи будут сбрасываться в числовые значения (0, 1, 2, ...).\r\nРазличия в порядке сортировки: алфавитный, возрастающий, убывающий, числовой, натуральный, случайный или определенный пользователем\r\nПримечание: Все функции сортировки модифицируют переданный массив, а не возвращают отсортированную копию\r\nЕсли функции определяют два элемента как равные, порядок сортировки в этом случае не определен (нестабильная сортировка)', '2014-02-18 16:17:39', 1392740259),
(134, 'Pass', 'Anonymous', 'A route can tell the Slim application to continue to the next matching route with the Slim application’s pass() method. When this method is invoked, the Slim application will immediately stop processing the current matching route and invoke the next matching route. If no subsequent matching route is found, a 404 Not Found response is sent to the client. Here is an example. Assume an HTTP request for “GET /hello/Frank”.', '2014-02-18 16:26:32', 1392740792),
(135, 'mah nigga', 'Anonymous', 'If you''re going to use array_push() to insert a "$key" => "$value" pair into an array, it can be done using the following:\r\n\r\n    $data[$key] = $value;\r\n\r\nIt is not necessary to use array_push.', '2014-02-18 16:33:37', 1392741217),
(136, 'Проблема с PHP', 'Anonymous', 'Код надо писать не как попало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный код не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и нажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides (http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.), вот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, используется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом, открой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" — хорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab он вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:', '2014-02-18 16:35:06', 1392741306),
(137, 'Редирект', 'Бобби', 'It is easy to redirect the client to another URL with the Slim application’s redirect() method. This method accepts two arguments: the first argument is the URL to which the client will redirect; the second optional argument is the HTTP status code. By default the redirect() method will send a 302 Temporary Redirect response.', '2014-02-19 11:43:28', 1392810208),
(138, 'Route URL Rewriting', 'Anonymous', 'I strongly encourage you to use a web server that supports URL rewriting; this will let you enjoy clean, human-friendly URLs with your Slim application. To enable URL rewriting, you should use the appropriate tools provided by your web server to forward all HTTP requests to the PHP file in which you instantiate and run your Slim application. The following are sample, bare minimum, configurations for Apache with mod_php and nginx. These are not meant to be production ready configurations but should be enough to get you up and running. To read more on server deployment in general you can continue reading http://www.phptherightway.com.', '2014-02-19 11:44:25', 1392810265),
(139, 'Проблема с PHP', 'Anonymous', 'Код надо писать не как попало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный код не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и нажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides (http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.), вот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, используется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом, открой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" — хорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab он вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:', '2014-02-19 12:01:43', 1392811303),
(140, 'Проблема с PHP', 'Anonymous', 'Код надо писать не как попало, а аккуратно и красиво. Почему? Потому, что на неакуратно написанный код не хочется даже смотреть.\r\n\r\nЕсли тебе лень выравнивать код руками, закачай его на http://beta.phpformatter.com/ и нажми «format». Робот исправит выравнивание и отступы в мгновение ока. \r\n\r\nСамый распространенный стандарт оформления — это Zend Coding Guides (http://framework.zend.com/manual/1.12/en/coding-standard.html — на англ. яз.), вот их суть:\r\n\r\n- переменные и функции пишутся с маленькой буквы, _ не используется, используется camelCase, пример: $x, $numberOfPeople, printResults()\r\n- Название функции начинается с глагола, в стиле «сделайЧтоТо»\r\n- не знаешь английский? Не беда, в 21 веке есть решение этой проблемы. Не пиши транслитом, открой лучше Гугл Транслейт или slovari.yandex.ru и найди название для переменной там\r\n- в именах классов используется CamelCase, первая буква большая, «_» может использоваться\r\n- мы предпочитаем подстановку переменных вместо конкатенации строк: "I am $age years old" — хорошо, ''I am '' . $age . '' years old'' — плохо \r\n- мы используем для отступов 4 пробела (можно настроить редактор, чтобы при нажатии Tab он вставлял 4 пробела)\r\n- скобки в for и if/else ставятся так:', '2014-02-19 18:01:15', 1392832875);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
